{"version":3,"sources":["webpack:///./resources/js/dashboard/EventBus.js","webpack:///./resources/js/dashboard/views/setting/Settings.vue?feef","webpack:///./resources/js/dashboard/static/setting/setting.js","webpack:///./resources/js/dashboard/views/setting/Settings.vue?5651","webpack:///resources/js/dashboard/views/setting/Settings.vue","webpack:///./resources/js/dashboard/views/setting/Settings.vue","webpack:///./resources/js/dashboard/components/images/ImageUpload.vue?7026","webpack:///./resources/js/dashboard/components/images/ImageUpload.vue?da11","webpack:///resources/js/dashboard/components/images/ImageUpload.vue","webpack:///./resources/js/dashboard/components/images/ImageUpload.vue"],"names":["__webpack_require__","d","__webpack_exports__","EventBus","vue__WEBPACK_IMPORTED_MODULE_0__","n","Vue","settingsList","slug","type","value","options","labelKey","valueKey","name","instance","data","setting_Settingsvue_type_script_lang_js_","components","vSelect","vue_select_default","a","ImageUpload","instanceSlug","settings","API","api","methods","getOptionsData","component","this","forEach","item","getData","getOptions","find","params","_this","items","axios_default","get","list","then","response","container","undefined","getSettings","_this2","setValues","setting","settingItem","content","updateSettings","_this3","requestUrl","update","requestParams","settingObject","id","push","put","showNotification","error","getSettingName","$t","message","color","customInstance","isPlural","count","$tc","title","text","$vs","notify","created","mounted","Settings_component","Object","componentNormalizer","_vm","_h","$createElement","_c","_self","attrs","staticClass","_l","index","key","_v","_s","autocomplete","is-selected","on","update:isSelected","$event","$set","update:is-selected","model","callback","$$v","expression","_e","click","images_ImageUploadvue_type_script_lang_js_","FilePond","vue_filepond_default","filepond_plugin_file_validate_type_default","filepond_plugin_file_validate_size_default","props","per_page","Number","default","multiple","Boolean","isQuillEditor","previewWidth","String","maxFileSize","allowedFileTypes","popupActive","uploadPopupActive","uploadLabel","uploadUrl","files","images","currentImage","selectedImages","sort_key","sort_order","pagination","currentPage","nextPageUrl","totalPages","loadedImages","watch","pagination.currentPage","oldValue","getImages","$attrs.value","setData","hideLoad","length","loading","close","showLoading","request_url","image","page","next_page_url","last_page","imageUploaded","selectImage","setCurrentImage","imagesCount","multipleUpload","existingImage","isEmpty","splice","_existingImage","handleSelect","isSelected","updateImage","removeImage","selectedPosition","indexOf","deleteImage","position","scale","background","setImages","assign","obj","prop","hasOwnProperty","showImagesModal","closeImagesModal","e","$emit","$attrs","Array","isArray","JSON","parse","setUploadUrl","getActionName","action","useModel","actionText","getPropertyTitle","property","create","listenEvents","_this4","$on","style","width","image-id","src","url","fullscreen","active","update:active","class","border-primary","load","label-placeholder","change","total","label-idle","allow-multiple","accepted-file-types","server","max-file-size","processfiles"],"mappings":"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","file":"25.js","sourcesContent":["import Vue from 'vue';\nexport const EventBus = new Vue();\nexport default EventBus;","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('vx-card',{attrs:{\"title\":_vm.$t('settings.pageTitle')}},[_c('div',{staticClass:\"vx-row\"},[_c('div',{staticClass:\"vx-col w-full\"},_vm._l((_vm.settingsList),function(setting,index){return _c('div',{key:index,staticClass:\"vx-row mb-3\"},[_c('div',{staticClass:\"vx-col w-full\"},[_c('p',{staticClass:\"font-bold mb-2\"},[_vm._v(_vm._s(_vm.getSettingName(setting.slug)))])]),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full\"},[(setting.type === 'select')?_c('vs-select',{staticClass:\"w-full\",attrs:{\"autocomplete\":\"\",\"is-selected\":setting.value},on:{\"update:isSelected\":function($event){return _vm.$set(setting, \"value\", $event)},\"update:is-selected\":function($event){return _vm.$set(setting, \"value\", $event)}},model:{value:(setting.value),callback:function ($$v) {_vm.$set(setting, \"value\", $$v)},expression:\"setting.value\"}},_vm._l((_vm.getOptions(setting.options)),function(item,index){return _c('vs-select-item',{key:index,attrs:{\"value\":item[setting.valueKey],\"text\":item[setting.labelKey]}})}),1):_vm._e(),_vm._v(\" \"),(setting.type === 'textarea')?_c('vs-textarea',{staticClass:\"mb-0\",model:{value:(setting.value),callback:function ($$v) {_vm.$set(setting, \"value\", $$v)},expression:\"setting.value\"}}):_vm._e(),_vm._v(\" \"),(setting.type === 'textInput')?_c('vs-input',{staticClass:\"w-full mb-0\",model:{value:(setting.value),callback:function ($$v) {_vm.$set(setting, \"value\", $$v)},expression:\"setting.value\"}}):_vm._e(),_vm._v(\" \"),(setting.type === 'image')?_c('image-upload',{model:{value:(setting.value),callback:function ($$v) {_vm.$set(setting, \"value\", $$v)},expression:\"setting.value\"}}):_vm._e()],1)])}),0)]),_vm._v(\" \"),_c('div',{staticClass:\"vx-row\"},[_c('div',{staticClass:\"vx-col w-full\"},[_c('vs-button',{on:{\"click\":function($event){return _vm.updateSettings()}}},[_vm._v(_vm._s(_vm.$t('actions.update')))])],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//The list of all settings\nexport const settingsList = [\n\n    {\n        slug: 'site_logo',\n        type: 'image',\n        value: ''\n    },\n    {\n        slug: 'default_currency',\n        type: 'select',\n        options: 'currencies',\n        labelKey: 'title',\n        valueKey: 'code',\n        value: ''\n    },\n    {\n        slug: 'order_status',\n        type: 'select',\n        options: 'orderStatuses',\n        labelKey: 'title',\n        valueKey: 'id',\n        value: ''\n    },\n    {\n        slug: 'analytics_code',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'pixel_code',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'custom_js',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'custom_css',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'fb_url',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'twitter_url',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'instagram_url',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'youtube_url',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'contact_phone',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'contact_email',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'categories_seo_title',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'categories_seo_keywords',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'categories_seo_description',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'home_seo_title',\n        type: 'textInput',\n        value: ''\n    },\n    {\n        slug: 'home_seo_keywords',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'home_seo_description',\n        type: 'textarea',\n        value: ''\n    }\n\n];\n\nexport const options = [\n\n    {\n        name: 'currencies',\n        instance: 'currency',\n        data: []\n    },\n    {\n        name: 'orderStatuses',\n        instance: 'orderStatus',\n        data: []\n    }\n\n];","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"","<template>\r\n\r\n    <div>\r\n\r\n        <vx-card :title=\"$t('settings.pageTitle')\">\r\n            <div class=\"vx-row\">\r\n                <div class=\"vx-col w-full\">\r\n\r\n                    <div class=\"vx-row mb-3\" :key=\"index\" v-for=\"setting, index in settingsList\">\r\n\r\n                        <div class=\"vx-col w-full\">\r\n                            <p class=\"font-bold mb-2\">{{ getSettingName(setting.slug) }}</p>\r\n                        </div>\r\n                        <div class=\"vx-col w-full\">\r\n\r\n                            <!--Select-->\r\n                            <vs-select\r\n                                autocomplete\r\n                                v-model=\"setting.value\"\r\n                                :is-selected.sync=\"setting.value\"\r\n                                class=\"w-full\"\r\n                                v-if=\"setting.type === 'select'\"\r\n                            >\r\n                                <vs-select-item :key=\"index\" :value=\"item[setting.valueKey]\" :text=\"item[setting.labelKey]\" v-for=\"item,index in getOptions(setting.options)\" />\r\n                            </vs-select>\r\n\r\n                            <!--Textarea-->\r\n                            <vs-textarea\r\n                                v-model=\"setting.value\"\r\n                                class=\"mb-0\"\r\n                                v-if=\"setting.type === 'textarea'\"\r\n                            >\r\n                            </vs-textarea>\r\n\r\n                            <!--Text input-->\r\n                            <vs-input\r\n                                v-model=\"setting.value\"\r\n                                class=\"w-full mb-0\"\r\n                                v-if=\"setting.type === 'textInput'\"\r\n                            >\r\n                            </vs-input>\r\n\r\n                            <!-- Image upload component -->\r\n                            <image-upload v-if=\"setting.type === 'image'\" v-model=\"setting.value\"></image-upload>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div class=\"vx-row\">\r\n                <div class=\"vx-col w-full\">\r\n                    <vs-button @click=\"updateSettings()\">{{ $t('actions.update') }}</vs-button>\r\n                </div>\r\n            </div>\r\n        </vx-card>\r\n\r\n    </div>\r\n\r\n</template>\r\n<script>\r\n\r\n    //Library for working with requests\r\n    import axios from 'axios';\r\n\r\n    //Vue select\r\n    import vSelect from 'vue-select'\r\n\r\n    //Image uploader\r\n    import ImageUpload from '../../components/images/ImageUpload';\r\n\r\n    //Settings list\r\n    import { settingsList, options } from \"../../static/setting/setting\";\r\n\r\n    //Applications routes\r\n    import { API } from '@/mixins/api/api';\r\n\r\n    export default {\r\n        components: {vSelect, ImageUpload},\r\n        data() {\r\n\r\n            return {\r\n\r\n                instance: 'setting',\r\n                instanceSlug: 'settings',\r\n                settingsList,\r\n                options,\r\n                settings: [],\r\n                API\r\n            }\r\n\r\n        },\r\n        methods: {\r\n\r\n            getOptionsData(){\r\n\r\n                let component = this;\r\n\r\n                this.options.forEach(function(item){\r\n\r\n                    component.getData(item.instance);\r\n\r\n                });\r\n\r\n            },\r\n            getOptions(name){\r\n\r\n                let container = this.options.find(function(item){\r\n\r\n                    return item.name === name;\r\n\r\n                });\r\n\r\n                return container.data;\r\n\r\n            },\r\n            getData(instance, params){\r\n\r\n                let items = [];\r\n\r\n                axios.get(this.API[instance].list, params).then(response => {\r\n\r\n                    items = response.data.data;\r\n\r\n                    let container = this.options.find(function(item){\r\n\r\n                        return item.instance === instance;\r\n\r\n                    });\r\n\r\n                    if(container !== undefined){\r\n\r\n                        container.data = items;\r\n\r\n                    }\r\n\r\n                });\r\n\r\n\r\n            },\r\n            getSettings(params){\r\n\r\n                axios.get(this.API[this.instance].list, params).then(response => {\r\n\r\n                    this.settings = response.data.data;\r\n\r\n                    //Set values for settings\r\n                    this.setValues();\r\n\r\n                });\r\n\r\n            },\r\n            setValues(){\r\n\r\n                let settings = this.settings;\r\n\r\n                this.settingsList.forEach(function(setting){\r\n\r\n                    let settingItem = settings.find(function(item){\r\n\r\n                        return item.slug === setting.slug;\r\n\r\n                    });\r\n\r\n                    if(settingItem !== undefined){\r\n\r\n                        setting.value = settingItem.content;\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            },\r\n            updateSettings(){\r\n\r\n                let component = this;\r\n\r\n                let settings = this.settings;\r\n\r\n                let requestUrl = this.API[this.instance].update;\r\n\r\n                let requestParams = {\r\n                    settings: []\r\n                };\r\n\r\n                this.settingsList.forEach(function(setting){\r\n\r\n\r\n                    let settingItem = settings.find(function(item){\r\n\r\n                        return item.slug === setting.slug;\r\n\r\n                    });\r\n\r\n                    if(settingItem !== undefined && setting.value !== settingItem.content){\r\n\r\n                        let settingObject = {\r\n                            id: settingItem.id,\r\n                            content: setting.value\r\n                        };\r\n\r\n                        requestParams.settings.push(settingObject);\r\n\r\n                    }\r\n\r\n\r\n                });\r\n\r\n\r\n                axios.put(requestUrl, requestParams).then(\r\n                    response => {\r\n\r\n                        if (response.data === 'success') {\r\n\r\n                            this.showNotification('success', 'request.updatedSuccess', 'success', undefined, true);\r\n\r\n                        }\r\n\r\n                    })\r\n                    .catch(\r\n                        error => {\r\n\r\n                            this.showNotification('success', 'request.error', 'danger');\r\n\r\n                        }\r\n                    );\r\n\r\n            },\r\n            getSettingName(slug){\r\n\r\n                return this.$t('settings.' + slug + '.title');\r\n\r\n            },\r\n            showNotification(type, message, color, customInstance, isPlural){\r\n\r\n                let instance = '';\r\n\r\n                let count = 1;\r\n\r\n                if(isPlural){\r\n\r\n                    count = 2;\r\n\r\n                }\r\n\r\n                if(customInstance){\r\n\r\n                    instance = this.$tc('models.' + customInstance + '.title', count);\r\n\r\n                }\r\n                else{\r\n\r\n                    instance = this.$tc('models.' + this.instance + '.title', count);\r\n\r\n                }\r\n\r\n                let title = this.$t('messages.' + type);\r\n\r\n                let text = this.$tc('messages.' + message, count, { instance: instance });\r\n\r\n                this.$vs.notify(\r\n                    {\r\n                        title: title,\r\n                        text:  text,\r\n                        color: color\r\n                    }\r\n                );\r\n\r\n            },\r\n\r\n        },\r\n        created(){\r\n\r\n        },\r\n        mounted() {\r\n\r\n            //Get the data for selects\r\n            this.getOptionsData();\r\n\r\n            //Get settings values\r\n            this.getSettings();\r\n\r\n        }\r\n    }\r\n</script>","import { render, staticRenderFns } from \"./Settings.vue?vue&type=template&id=4445c8cd&\"\nimport script from \"./Settings.vue?vue&type=script&lang=js&\"\nexport * from \"./Settings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[(!_vm.isQuillEditor)?_c('div',{staticClass:\"vx-row mb-3\"},[_c('div',{staticClass:\"vx-col w-full\"},[_c('div',{staticClass:\"abr-form-images flex flex-wrap content-start w-full\"},_vm._l((_vm.selectedImages),function(image){return _c('div',{key:image.id,staticClass:\"abr-form-image\",style:({width: _vm.previewWidth}),attrs:{\"image-id\":image.id}},[_c('img',{staticClass:\"object-cover rounded\",attrs:{\"src\":image.url,\"width\":\"100%\"}}),_vm._v(\" \"),_c('div',{staticClass:\"abr-image-btn bg-danger rounded shadow\",on:{\"click\":function($event){return _vm.removeImage(image)}}},[_c('i',{staticClass:\"material-icons\"},[_vm._v(\"\\n                            close\\n                        \")])])])}),0)]),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full\"},[_c('vs-button',{attrs:{\"color\":\"primary\",\"type\":\"filled\"},on:{\"click\":function($event){return _vm.showImagesModal()}}},[_vm._v(_vm._s(_vm.getActionName('choose', true, _vm.multiple)))])],1)]):_vm._e(),_vm._v(\" \"),_c('vs-popup',{attrs:{\"fullscreen\":\"\",\"title\":_vm.getPropertyTitle('uploaderTitle'),\"active\":_vm.popupActive},on:{\"update:active\":function($event){_vm.popupActive=$event}}},[_c('div',{staticClass:\"vx-row abr-images-container mb-0\"},[_c('div',{staticClass:\"vx-col w-3/4 h-full abr-images flex flex-wrap content-start mb-0 pr-0 vs-con-loading__container\",attrs:{\"id\":\"abr-images\"}},_vm._l((_vm.images),function(image,index){return _c('div',{key:image.id,staticClass:\"abr-images-item rounded\",class:{'border-primary': _vm.isSelected(image.id)},attrs:{\"image-id\":image.id}},[_c('img',{staticClass:\"object-cover\",attrs:{\"src\":image.url,\"width\":\"100%\"},on:{\"click\":function($event){return _vm.selectImage(image)},\"load\":function($event){return _vm.hideLoad(index)}}}),_vm._v(\" \"),(_vm.isSelected(image.id))?_c('div',{staticClass:\"abr-image-btn bg-danger rounded shadow\",on:{\"click\":function($event){return _vm.removeImage(image)}}},[_c('i',{staticClass:\"material-icons\"},[_vm._v(\"\\n                            close\\n                        \")])]):_vm._e()])}),0),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-1/4 pl-0\"},[_c('div',{staticClass:\"vx-row\"},[(!_vm.isEmpty(_vm.currentImage))?_c('div',{staticClass:\"vx-col w-full abr-selected-image\"},[_c('h3',{staticClass:\"mb-6\"},[_vm._v(_vm._s(_vm.getPropertyTitle('imageParameters')))]),_vm._v(\" \"),_c('div',{staticClass:\"vx-row abr-image-preview mb-6\"},[_c('div',{staticClass:\"vx-col w-full\"},[_c('img',{staticClass:\"mb-3\",attrs:{\"src\":_vm.currentImage.url}}),_vm._v(\" \"),_c('p',[_vm._v(_vm._s(_vm.currentImage.title))])])]),_vm._v(\" \"),_c('div',{staticClass:\"vx-row abr-image-form\"},[_c('div',{staticClass:\"vx-col w-full mb-6\"},[_c('vs-input',{staticClass:\"w-full\",attrs:{\"label-placeholder\":_vm.getPropertyTitle('title')},on:{\"change\":function($event){return _vm.updateImage(_vm.currentImage)}},model:{value:(_vm.currentImage.title),callback:function ($$v) {_vm.$set(_vm.currentImage, \"title\", $$v)},expression:\"currentImage.title\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full mb-6\"},[_c('vs-input',{staticClass:\"w-full\",attrs:{\"label-placeholder\":_vm.getPropertyTitle('description')},on:{\"change\":function($event){return _vm.updateImage(_vm.currentImage)}},model:{value:(_vm.currentImage.description),callback:function ($$v) {_vm.$set(_vm.currentImage, \"description\", $$v)},expression:\"currentImage.description\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full mb-6\"},[_c('vs-input',{staticClass:\"w-full\",attrs:{\"label-placeholder\":_vm.getPropertyTitle('alt')},on:{\"change\":function($event){return _vm.updateImage(_vm.currentImage)}},model:{value:(_vm.currentImage.alt),callback:function ($$v) {_vm.$set(_vm.currentImage, \"alt\", $$v)},expression:\"currentImage.alt\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full mb-6\"},[_c('vs-button',{staticClass:\"w-1/2\",attrs:{\"color\":\"danger\",\"type\":\"filled\"},on:{\"click\":function($event){return _vm.deleteImage(_vm.currentImage)}}},[_vm._v(_vm._s(_vm.getActionName('delete', true)))])],1)])]):_vm._e()])])]),_vm._v(\" \"),_c('div',{staticClass:\"vx-row abr-images-pagination mb-0\"},[_c('div',{staticClass:\"vx-col flex justify-center items-center w-3/4\"},[_c('vs-pagination',{attrs:{\"total\":_vm.pagination.totalPages},model:{value:(_vm.pagination.currentPage),callback:function ($$v) {_vm.$set(_vm.pagination, \"currentPage\", $$v)},expression:\"pagination.currentPage\"}})],1),_vm._v(\" \"),_c('div',{staticClass:\"vx-col flex justify-center items-center w-1/4 pl-0\"},[_c('vs-button',{staticClass:\"mr-3\",attrs:{\"color\":\"primary\",\"type\":\"filled\"},on:{\"click\":function($event){return _vm.closeImagesModal()}}},[_vm._v(_vm._s(_vm.getActionName('choose', true, _vm.multiple)))]),_vm._v(\" \"),_c('vs-button',{attrs:{\"type\":\"border\"},on:{\"click\":function($event){_vm.uploadPopupActive = true}}},[_vm._v(_vm._s(_vm.getActionName('upload')))])],1)]),_vm._v(\" \"),_c('vs-popup',{attrs:{\"title\":_vm.getActionName('upload', true, _vm.multiple),\"active\":_vm.uploadPopupActive},on:{\"update:active\":function($event){_vm.uploadPopupActive=$event}}},[_c('div',{staticClass:\"vx-row m-0\"},[_c('div',{staticClass:\"vx-col w-full p-0\"},[_c('file-pond',{attrs:{\"name\":\"file[]\",\"label-idle\":_vm.uploadLabel,\"allow-multiple\":\"true\",\"accepted-file-types\":_vm.allowedFileTypes,\"server\":_vm.uploadUrl,\"files\":_vm.files,\"max-file-size\":_vm.maxFileSize},on:{\"processfiles\":function($event){return _vm.imageUploaded()}}})],1),_vm._v(\" \"),_c('div',{staticClass:\"vx-col w-full p-0\"},[_c('vs-button',{staticClass:\"float-right\",on:{\"click\":function($event){_vm.uploadPopupActive = false}}},[_vm._v(_vm._s(_vm.getActionName('close')))])],1)])])],1)],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageUpload.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageUpload.vue?vue&type=script&lang=js&\"","<template>\n\n\n    <div>\n\n        <div class=\"vx-row mb-3\" v-if=\"!isQuillEditor\">\n\n            <div class=\"vx-col w-full\">\n                <div class=\"abr-form-images flex flex-wrap content-start w-full\">\n\n                    <div class=\"abr-form-image\" :style=\"{width: previewWidth}\" :key=\"image.id\" v-for=\"image in selectedImages\" :image-id=\"image.id\">\n                        <img :src=\"image.url\" width=\"100%\" class=\"object-cover rounded\" />\n                        <div class=\"abr-image-btn bg-danger rounded shadow\" @click=\"removeImage(image)\">\n                            <i class=\"material-icons\">\n                                close\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n            <div class=\"vx-col w-full\">\n                <vs-button color=\"primary\" type=\"filled\" @click=\"showImagesModal()\">{{ getActionName('choose', true, multiple) }}</vs-button>\n            </div>\n\n        </div>\n\n        <vs-popup fullscreen :title=\"getPropertyTitle('uploaderTitle')\" :active.sync=\"popupActive\">\n\n            <div class=\"vx-row abr-images-container mb-0\">\n                <div id=\"abr-images\" class=\"vx-col w-3/4 h-full abr-images flex flex-wrap content-start mb-0 pr-0 vs-con-loading__container\">\n\n                    <div class=\"abr-images-item rounded\" v-bind:class=\"{'border-primary': isSelected(image.id)}\" :key=\"image.id\" v-for=\"image, index in images\" :image-id=\"image.id\">\n                        <img :src=\"image.url\" width=\"100%\" class=\"object-cover\" v-on:click=\"selectImage(image)\" @load=\"hideLoad(index)\" />\n                        <div class=\"abr-image-btn bg-danger rounded shadow\" v-if=\"isSelected(image.id)\" @click=\"removeImage(image)\">\n                            <i class=\"material-icons\">\n                                close\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n                <div class=\"vx-col w-1/4 pl-0\">\n                    <div class=\"vx-row\">\n                        <div class=\"vx-col w-full abr-selected-image\" v-if=\"!isEmpty(currentImage)\">\n                            <h3 class=\"mb-6\">{{ getPropertyTitle('imageParameters') }}</h3>\n                            <div class=\"vx-row abr-image-preview mb-6\">\n                                <div class=\"vx-col w-full\">\n                                    <img :src=\"currentImage.url\" class=\"mb-3\" />\n                                    <p>{{ currentImage.title }}</p>\n                                </div>\n                            </div>\n                            <div class=\"vx-row abr-image-form\">\n                                <div class=\"vx-col w-full mb-6\">\n                                    <vs-input :label-placeholder=\"getPropertyTitle('title')\" class=\"w-full\" v-model=\"currentImage.title\" @change=\"updateImage(currentImage)\" />\n                                </div>\n                                <div class=\"vx-col w-full mb-6\">\n                                    <vs-input :label-placeholder=\"getPropertyTitle('description')\" class=\"w-full\" v-model=\"currentImage.description\" @change=\"updateImage(currentImage)\" />\n                                </div>\n                                <div class=\"vx-col w-full mb-6\">\n                                    <vs-input :label-placeholder=\"getPropertyTitle('alt')\" class=\"w-full\" v-model=\"currentImage.alt\" @change=\"updateImage(currentImage)\" />\n                                </div>\n                                <div class=\"vx-col w-full mb-6\">\n                                    <vs-button color=\"danger\" class=\"w-1/2\" type=\"filled\" @click=\"deleteImage(currentImage)\">{{ getActionName('delete', true) }}</vs-button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"vx-row abr-images-pagination mb-0\">\n                <div class=\"vx-col flex justify-center items-center w-3/4\">\n                    <vs-pagination :total=\"pagination.totalPages\" v-model=\"pagination.currentPage\"></vs-pagination>\n                </div>\n                <div class=\"vx-col flex justify-center items-center w-1/4 pl-0\">\n                    <vs-button color=\"primary\" type=\"filled\" class=\"mr-3\" @click=\"closeImagesModal()\">{{ getActionName('choose', true, multiple) }}</vs-button>\n                    <vs-button type=\"border\" @click=\"uploadPopupActive = true\">{{ getActionName('upload') }}</vs-button>\n                </div>\n            </div>\n\n            <vs-popup :title=\"getActionName('upload', true, multiple)\" :active.sync=\"uploadPopupActive\">\n                <div class=\"vx-row m-0\">\n                    <div class=\"vx-col w-full p-0\">\n                        <file-pond\n                                name=\"file[]\"\n                                :label-idle=\"uploadLabel\"\n                                allow-multiple=\"true\"\n                                :accepted-file-types=\"allowedFileTypes\"\n                                :server=\"uploadUrl\"\n                                v-bind:files=\"files\"\n                                v-on:processfiles=\"imageUploaded()\"\n                                :max-file-size=\"maxFileSize\"\n                        />\n                    </div>\n                    <div class=\"vx-col w-full p-0\">\n                        <vs-button class=\"float-right\" @click=\"uploadPopupActive = false\">{{ getActionName('close') }}</vs-button>\n                    </div>\n                </div>\n            </vs-popup>\n\n        </vs-popup>\n\n    </div>\n\n\n</template>\n\n<script>\n\n    import axios from 'axios';\n\n    //Application routes\n    import { API } from '../../mixins/api/api.js';\n\n    // Import Vue FilePond\n    import vueFilePond from 'vue-filepond';\n\n    // Import FilePond styles\n    import 'filepond/dist/filepond.min.css';\n\n    //FilePond plugins\n    import FilePondPluginFileValidateType from 'filepond-plugin-file-validate-type';\n    import FilePondPluginFileValidateSize from 'filepond-plugin-file-validate-size';\n\n    // Create component\n    const FilePond = vueFilePond(FilePondPluginFileValidateType, FilePondPluginFileValidateSize);\n\n    //Events bus\n    import { EventBus } from '../../EventBus';\n\n    export default {\n        name: \"ImageUpload\",\n        components: { FilePond },\n        props: {\n            per_page: {\n                type: Number,\n                default: 20\n            },\n            multiple: {\n                type: Boolean,\n                default: false\n            },\n            isQuillEditor: {\n                type: Boolean,\n                default: false\n            },\n            previewWidth: {\n                type: String,\n                default: '24%'\n            },\n            maxFileSize: {\n                type: String,\n                default: '1MB'\n            },\n            allowedFileTypes: {\n                type: String,\n                default: 'image/jpeg, image/png, image/svg+xml'\n            }\n        },\n        data() {\n            return {\n                popupActive: false,\n                uploadPopupActive: false,\n                uploadLabel: 'Drag & Drop your image or <span class=\"filepond--label-action\"> Browse </span>',\n                uploadUrl: '',\n                files: [],\n                images: [],\n                currentImage: {},\n                selectedImages: [],\n                requestParams: {\n                    per_page: this.per_page,\n                    sort_key: 'created_at',\n                    sort_order: 'desc'\n                },\n                pagination: {\n                    currentPage: 1,\n                    nextPageUrl: '',\n                    totalPages: 1\n                },\n                loadedImages: [],\n                API\n            }\n        },\n        watch: {\n\n            'pagination.currentPage': function(value, oldValue) {\n\n                this.getImages();\n\n            },\n            '$attrs.value': function (value, oldValue) {\n\n                this.setData();\n\n            }\n\n        },\n        methods: {\n            hideLoad(index){\n\n                this.loadedImages.push(index);\n\n                if(this.loadedImages.length === this.images.length){\n\n                    this.$vs.loading.close('#abr-images > .con-vs-loading')\n\n                }\n\n            },\n            getImages() {\n\n                this.showLoading();\n\n                let request_url = this.API.image.list;\n\n                let page = this.pagination.currentPage;\n\n                if (this.pagination.nextPageUrl != '') {\n\n                    request_url = request_url + '?page=' + page\n\n                }\n\n                //Clear the loaded images list\n                this.images = [];\n                this.loadedImages = [];\n\n                axios.get(request_url, {params: this.requestParams}).then(response => {\n\n                    this.images = response.data.data;\n\n                    this.pagination.nextPageUrl = response.data.next_page_url;\n\n                    this.pagination.totalPages = response.data.last_page;\n\n                });\n\n            },\n            imageUploaded(){\n\n                this.getImages();\n\n            },\n            selectImage(image){\n\n                //Set current image for the image form\n                this.setCurrentImage(image);\n\n                let selectedImages = this.selectedImages;\n\n                let imagesCount = selectedImages.length;\n\n                let multipleUpload = this.multiple;\n\n                let existingImage = selectedImages.find(function (item) {\n\n                    return item.id === image.id;\n\n                });\n\n                if(this.isEmpty(existingImage)){\n\n                    if(multipleUpload){\n\n                        this.selectedImages.push(image);\n\n                    }\n                    else{\n\n                        this.selectedImages.splice(0, 1);\n\n                        this.selectedImages.push(image);\n\n                    }\n\n                }\n\n                if(imagesCount < 1 || multipleUpload) {\n\n                    let existingImage = selectedImages.find(function (item) {\n\n                        return item.id === image.id;\n\n                    });\n\n                    if(this.isEmpty(existingImage)){\n\n                        this.selectedImages.push(image);\n\n                    }\n\n                }\n\n                //Send the selected image\n                this.handleSelect();\n\n            },\n            isSelected(image){\n\n                let selectedImage = this.selectedImages.find(function(item){\n\n                    return item.id === image;\n\n                });\n\n                if(selectedImage){\n\n                    return true;\n\n                }\n\n            },\n            updateImage(image){\n\n                axios.put(this.API.image.update + '/' + image.id, image).then(response => {\n\n                    if(response.data === 'success'){\n\n                        this.showNotification('success', 'request.updatedSuccess', 'success');\n\n                    }\n                    else{\n\n                        this.showNotification('error', 'request.error', 'danger');\n\n                    }\n\n                });\n\n            },\n            removeImage(image){\n\n                let selectedImages = this.selectedImages;\n\n                let existingImage = selectedImages.find(function(item){\n\n                    return item.id === image.id;\n\n                });\n\n                if(existingImage !== undefined){\n\n                    let selectedPosition = selectedImages.indexOf(existingImage);\n\n                    selectedImages.splice(selectedPosition, 1);\n\n                }\n\n                if(this.currentImage.id === image.id){\n\n                    this.currentImage = {};\n\n                }\n\n            },\n            deleteImage(image){\n\n                this.removeImage(image);\n\n                let images = this.images;\n\n                let existingImage = images.find(function(item){\n\n                    return item.id === image.id;\n\n                });\n\n                axios.delete(this.API.image.delete + '/' + image.id).then(response => {\n\n                    if(response.data === 'success'){\n\n                        this.showNotification('success', 'request.deletedSuccess', 'success');\n\n                        if(existingImage !== undefined){\n\n                            let position = images.indexOf(image);\n\n                            images.splice(position, 1);\n\n                        }\n\n                    }\n                    else{\n\n                        this.showNotification('error', 'request.error', 'danger');\n\n                    }\n\n                });\n\n            },\n            showNotification(type, message, color, customInstance, isPlural){\n\n                let instance = '';\n\n                let count = 1;\n\n                if(isPlural){\n\n                    count = 2;\n\n                }\n\n                if(customInstance){\n\n                    instance = this.$tc('models.' + customInstance + '.title', count);\n\n                }\n                else{\n\n                    instance = this.$tc('models.image.title', count);\n\n                }\n\n                let title = this.$t('messages.' + type);\n\n                let text = this.$tc('messages.' + message, count, { instance: instance });\n\n                this.$vs.notify(\n                    {\n                        title: title,\n                        text:  text,\n                        color: color\n                    }\n                );\n\n            },\n            showLoading(){\n\n                this.$vs.loading({\n                    container: '#abr-images',\n                    scale: 1,\n                    background: '#fff',\n                    color: 'primary'\n                });\n\n            },\n            setImages(images){\n\n                this.selectedImages = images;\n\n                if(this.currentImage === {}){\n\n                    this.setCurrentImage();\n\n                }\n\n            },\n            setCurrentImage(image){\n\n                if(image === undefined){\n\n                    if (this.selectedImages.length > 0) {\n\n                        this.currentImage = Object.assign({}, this.selectedImages[0]);\n\n                    }\n                    else {\n\n                        this.currentImage = {};\n\n                    }\n\n                }\n                else {\n\n                    this.currentImage = Object.assign(image);\n\n                }\n\n            },\n            isEmpty(obj) {\n                for (var prop in obj) {\n                    if (obj.hasOwnProperty(prop)) return false;\n                }\n                return true;\n            },\n            showImagesModal(){\n                this.popupActive = true;\n                if(this.selectedImages.length === 0 && this.pagination.currentPage === 1) {\n\n                    //Show loading animation\n                    this.showLoading();\n\n                }\n                this.getImages();\n                this.setCurrentImage();\n            },\n            closeImagesModal(){\n                this.popupActive = false;\n            },\n            handleSelect (e) {\n\n                this.$emit('input', this.selectedImages);\n\n            },\n            setData(){\n\n                let images = this.$attrs.value;\n\n                if(images !== \"\" && images !== undefined){\n\n                    if(!Array.isArray(images)){\n\n                        images = JSON.parse(images);\n\n                    }\n\n                    this.setImages(images);\n\n                }\n\n                this.setUploadUrl();\n\n            },\n            getActionName(action, useModel, isPlural){\n\n                let count = 1;\n\n                if(isPlural){\n\n                    count = 2;\n\n                }\n\n                let actionText = this.$t('actions.' + action);\n\n                if(useModel){\n\n                    let instanceTitle = this.$tc('models.image.title', count);\n\n                    return actionText + ' ' + instanceTitle;\n\n                }\n                else{\n\n                    return actionText;\n\n                }\n\n            },\n            //Newer and more advanced method for retrieving a model property name\n            getPropertyTitle(property){\n\n                return this.$t('models.image.properties.' + property);\n\n            },\n            setUploadUrl(){\n\n                this.uploadUrl = this.API.image.create;\n\n            },\n            listenEvents(){\n\n                //Open images manager from quill editor\n                EventBus.$on('open-image-uploader', action => {\n\n                    this.showImagesModal();\n\n                });\n\n            }\n        },\n        created() {\n\n            //Set data for the images manager\n            this.setData();\n\n            //Listen to events\n            this.listenEvents();\n\n        }\n    }\n</script>","import { render, staticRenderFns } from \"./ImageUpload.vue?vue&type=template&id=50de4f08&\"\nimport script from \"./ImageUpload.vue?vue&type=script&lang=js&\"\nexport * from \"./ImageUpload.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}