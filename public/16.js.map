{"version":3,"sources":["webpack:///resources/js/dashboard/views/shipping/Form.vue","webpack:///./resources/js/dashboard/views/shipping/Form.vue?9f9e","webpack:///./resources/js/dashboard/mixins/forms/helper.js","webpack:///./resources/js/dashboard/static/shipping/shipping.js","webpack:///./resources/js/dashboard/views/shipping/Form.vue","webpack:///./resources/js/dashboard/views/shipping/Form.vue?838e","webpack:///./resources/js/dashboard/views/shipping/Form.vue?3c67"],"names":["formHelper","components","Datepicker","props","statuses","type","Array","title","$t","value","data","instance","model","products","producents","categories","banners","filters","attributes","selectedImages","shippingMethods","paymentMethods","orderStatuses","methods","setInstance","getFormTitle","isEdit","getSectionTitle","slug","getFormSectionTitle","getPropertyTitle","property","getFieldLabel","section","field","getProducts","params","axios","get","API","product","list","then","response","getProducents","producent","getCategories","category","getBanners","banner","getFilters","filter","getAttributes","attribute","getShippingMethods","requestUrl","shippingMethod","requestParams","defaultSortParams","getPaymentMethods","paymentMethod","getOrderStatuses","orderStatus","searchProducts","search","loading","searchCategories","searchFilters","showNotification","message","color","customInstance","isPlural","count","$tc","text","$vs","notify","getOptions","options","normalizeData","normalized","forEach","option","push","id","created","mounted","name","description","cost","image_id","validations","required","formStructure","sections","fields","validates","multiple"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;CAGA;;CAGA;;CAGA;;AACA;AAEA;AACA,wEADA;AAEA;AAAA;AAAA,GAFA;AAGA;AACA,uBADA;AAEA;AAEA,kBAFA;AAGA;AAHA,KAFA;AAQA;AAEA,kBAFA;AAGA;AAHA;AARA,GAHA;AAkBA,MAlBA,kBAkBA;AAEA;AACA;AADA;AAIA,GAxBA;AAyBA,oFAzBA;AA0BA;AACA,UADA,oBACA;AAAA;;AAEA;AACA;AAEA;AAEA;AAEA,mFACA,IADA,CAEA;AAEA;AAEA;;AAEA;AAEA;AAEA,OAZA,WAcA;AAEA;AAEA,OAlBA;AAqBA,KA/BA;AAgCA,UAhCA,oBAgCA;AAAA;;AAEA;AACA;AAEA;AAEA;AAEA;AAEA,kFACA,IADA,CAEA;AAEA;AAEA;AAEA;AAEA,OAVA,WAYA;AAEA;AAEA,OAhBA;AAmBA,KA9DA;AA+DA,uBA/DA,iCA+DA;AAEA;AAEA;AACA;AACA;AACA,OAHA,EAGA,GAHA;AAKA,KAxEA;AAyEA,YAzEA,sBAyEA;AAEA;AAEA,KA7EA;AA8EA,iBA9EA,2BA8EA;AAAA;;AAEA;AAEA;AAEA;AAEA;AAFA;AAFA;AAUA;AAEA;AAEA,qCAFA,CAIA;;AACA;AAEA;AAEA;AAEA,OAXA;AAaA,KA3GA;AA4GA,YA5GA,sBA4GA;AAEA;AACA;AAEA;AAEA;AAEA,KArHA;AAsHA,gBAtHA,0BAsHA;AAEA;AACA;AAEA;AAEA;AAEA,KA/HA;AAgIA,cAhIA,wBAgIA;AAEA;AAEA;AAEA;AAEA,SAJA,MAKA;AAEA;AAEA;AAEA,OAbA,MAcA;AAEA;AAEA;AAEA;AAtJA,GA1BA;AAkLA,SAlLA,qBAkLA;AAEA;AACA,oBAHA,CAKA;;AACA;AAEA,GA1LA;AA2LA;AAEA;AACA;AAEA;AAhMA,G;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS,sBAAsB;AAC/B;AACA;AACA;AACA,aAAa,qBAAqB,wCAAwC,EAAE;AAC5E;AACA,gCAAgC,yCAAyC;AACzE;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA,WAAW,+BAA+B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;A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","file":"16.js","sourcesContent":["<template>\n\n    <vx-card :title=\"getFormTitle(isEditForm)\" noShadow cardBorder>\n\n        <vs-tabs class=\"px-0\">\n\n            <vs-tab :label=\"getSectionTitle(item.slug)\" :key=\"index\" v-for=\"item, index in formStructure.sections\">\n\n                <div class=\"vx-row mb-6\" v-for=\"field, index in item.fields\" :key=\"index\">\n\n                    <div class=\"vx-col w-full\">\n\n                        <!-- Render inputs dynamically based on its types -->\n\n                        <!-- Input type text or number -->\n                        <vs-input\n                                v-if=\"field.type === 'text' || field.type === 'number'\"\n                                :type=\"field.type\"\n                                class=\"w-full\"\n                                :label=\"getFieldLabel(item.slug, field.model)\"\n                                v-model=\"model[field.model]\"\n                                :danger=\"validateField(field.model)\"\n                                val-icon-danger=\"close\"\n                        />\n\n                        <!-- Textarea -->\n                        <vs-textarea v-if=\"field.type === 'textarea'\" :label=\"getFieldLabel(item.slug, field.model)\" v-model=\"model[field.model]\" class=\"mb-0\" />\n\n                        <!-- Select -->\n                        <vs-select\n                                v-if=\"field.type === 'select'\"\n                                autocomplete\n                                class=\"w-full\"\n                                :label=\"getFieldLabel(item.slug, field.model)\"\n                                v-model=\"model[field.model]\"\n                                :multiple=\"field.multiple\"\n                                :is-selected.sync=\"model[field.model]\"\n                        >\n                            <vs-select-item :key=\"index\" :value=\"item[field.valueKey]\" :text=\"item[field.labelKey]\" v-for=\"item,index in getOptions(field.options)\" />\n                        </vs-select>\n\n                        <!-- Image upload component -->\n                        <image-upload v-model=\"selectedImages\" v-if=\"field.type === 'imageUpload'\"></image-upload>\n\n                        <!-- Validation text -->\n                        <span class=\"text-danger text-xs\" v-show=\"field.validates && validateField(field.model)\">{{ $t('messages.validation.invalidField') }}</span>\n\n                    </div>\n\n                </div>\n\n            </vs-tab>\n\n        </vs-tabs>\n\n        <!-- Actions -->\n        <div class=\"vx-row\">\n            <div class=\"vx-col w-full\">\n                <vs-button color=\"primary\" class=\"mr-3 mb-2\" @click=\"submitForm()\" v-if=\"!isEditForm\">{{ $t('actions.create') }}</vs-button>\n                <vs-button color=\"primary\" class=\"mr-3 mb-2\" @click=\"submitForm()\" v-if=\"isEditForm\">{{ $t('actions.update') }}</vs-button>\n                <vs-button color=\"danger\" type=\"border\" class=\"mb-2\" :to=\"{ name: indexRoute }\">{{ $t('actions.cancel') }}</vs-button>\n            </div>\n        </div>\n\n    </vx-card>\n\n</template>\n<script>\n\n    //Library for working with requests\n    import axios from 'axios';\n\n    //Form helper functions\n    import formHelper from \"@/mixins/forms/helper\";\n\n    //Shipping method model, validations and types\n    import { model, validations, formStructure } from \"@/static/shipping/shipping\";\n\n    //Image manager\n    import ImageUpload from '../../components/images/ImageUpload';\n\n    export default {\n        mixins: [ formHelper ],\n        components: {ImageUpload},\n        props: {\n            isEditForm: Boolean,\n            formModel: {\n\n                type: String,\n                default: 'shippingMethod'\n\n            },\n            indexRoute: {\n\n                type: String,\n                default: 'shipping_methods'\n\n            }\n        },\n        data() {\n\n            return {\n                formStructure\n            }\n\n        },\n        validations: validations,\n        methods: {\n            create(){\n\n                //Assemble an item\n                this.assembleItem();\n\n                let requestParams = this.model;\n\n                let requestUrl = this.API[this.instance].create;\n\n                axios.post(requestUrl, requestParams)\n                    .then(\n                        response => {\n\n                            if (response.data === 'success') {\n\n                                this.showNotification('success', 'request.createdSuccess', 'success');\n\n                                this.afterCreateCallback();\n\n                            }\n\n                        })\n                    .catch(\n                        error => {\n\n                            this.showNotification('error', 'request.error', 'danger');\n\n                        }\n                    );\n\n            },\n            update(){\n\n                //Assemble an item\n                this.assembleItem();\n\n                let requestParams = this.model;\n\n                let id = this.$route.params.id;\n\n                let requestUrl = this.API[this.instance].update + '/' + id;\n\n                axios.put(requestUrl, requestParams)\n                    .then(\n                        response => {\n\n                            if (response.data === 'success') {\n\n                                this.showNotification('success', 'request.updatedSuccess', 'success');\n\n                            }\n\n                        })\n                    .catch(\n                        error => {\n\n                            this.showNotification('error', 'request.error', 'danger');\n\n                        }\n                    );\n\n            },\n            afterCreateCallback(){\n\n                const component = this;\n\n                setTimeout(function () {\n                    component.redirectToIndex(component.indexRoute);\n                    component.setModel();\n                }, 500);\n\n            },\n            setModel(){\n\n                this.model = Object.assign({}, model);\n\n            },\n            getSingleItem(){\n\n                let id = this.$route.params.id;\n\n                let requestParams = {\n\n                    params: {\n\n                        id: id\n\n                    }\n\n                };\n\n                let requestUrl = this.API[this.instance].single;\n\n                axios.get(requestUrl, requestParams).then(response => {\n\n                    this.model = response.data;\n\n                    //Set image\n                    if(this.model.image !== null){\n\n                        this.selectedImages.push(this.model.image);\n\n                    }\n\n                });\n\n            },\n            loadData(){\n\n                //Get the data for editing\n                if(this.isEditForm){\n\n                    this.getSingleItem();\n\n                }\n\n            },\n            assembleItem(){\n\n                //Image\n                if(this.selectedImages.length > 0){\n\n                    this.model.image_id = this.selectedImages[0].id;\n\n                }\n\n            },\n            submitForm() {\n\n                if(!this.$v.$invalid){\n\n                    if(this.isEditForm){\n\n                        this.update();\n\n                    }\n                    else{\n\n                        this.create();\n\n                    }\n\n                }\n                else{\n\n                    this.showNotification('error', 'validation.invalidForm', 'danger');\n\n                }\n\n            }\n        },\n        mounted() {\n\n            //Set the model\n            this.setModel();\n\n            //Load the necessary data\n            this.loadData();\n\n        },\n        created: function () {\n\n            //Set an instance for the form rendering\n            this.setInstance(this.formModel);\n\n        }\n\n    }\n\n</script>","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"vx-card\",\n    {\n      attrs: {\n        title: _vm.getFormTitle(_vm.isEditForm),\n        noShadow: \"\",\n        cardBorder: \"\"\n      }\n    },\n    [\n      _c(\n        \"vs-tabs\",\n        { staticClass: \"px-0\" },\n        _vm._l(_vm.formStructure.sections, function(item, index) {\n          return _c(\n            \"vs-tab\",\n            { key: index, attrs: { label: _vm.getSectionTitle(item.slug) } },\n            _vm._l(item.fields, function(field, index) {\n              return _c(\"div\", { key: index, staticClass: \"vx-row mb-6\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col w-full\" },\n                  [\n                    field.type === \"text\" || field.type === \"number\"\n                      ? _c(\"vs-input\", {\n                          staticClass: \"w-full\",\n                          attrs: {\n                            type: field.type,\n                            label: _vm.getFieldLabel(item.slug, field.model),\n                            danger: _vm.validateField(field.model),\n                            \"val-icon-danger\": \"close\"\n                          },\n                          model: {\n                            value: _vm.model[field.model],\n                            callback: function($$v) {\n                              _vm.$set(_vm.model, field.model, $$v)\n                            },\n                            expression: \"model[field.model]\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    field.type === \"textarea\"\n                      ? _c(\"vs-textarea\", {\n                          staticClass: \"mb-0\",\n                          attrs: {\n                            label: _vm.getFieldLabel(item.slug, field.model)\n                          },\n                          model: {\n                            value: _vm.model[field.model],\n                            callback: function($$v) {\n                              _vm.$set(_vm.model, field.model, $$v)\n                            },\n                            expression: \"model[field.model]\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    field.type === \"select\"\n                      ? _c(\n                          \"vs-select\",\n                          {\n                            staticClass: \"w-full\",\n                            attrs: {\n                              autocomplete: \"\",\n                              label: _vm.getFieldLabel(item.slug, field.model),\n                              multiple: field.multiple,\n                              \"is-selected\": _vm.model[field.model]\n                            },\n                            on: {\n                              \"update:isSelected\": function($event) {\n                                return _vm.$set(_vm.model, field.model, $event)\n                              },\n                              \"update:is-selected\": function($event) {\n                                return _vm.$set(_vm.model, field.model, $event)\n                              }\n                            },\n                            model: {\n                              value: _vm.model[field.model],\n                              callback: function($$v) {\n                                _vm.$set(_vm.model, field.model, $$v)\n                              },\n                              expression: \"model[field.model]\"\n                            }\n                          },\n                          _vm._l(_vm.getOptions(field.options), function(\n                            item,\n                            index\n                          ) {\n                            return _c(\"vs-select-item\", {\n                              key: index,\n                              attrs: {\n                                value: item[field.valueKey],\n                                text: item[field.labelKey]\n                              }\n                            })\n                          }),\n                          1\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    field.type === \"imageUpload\"\n                      ? _c(\"image-upload\", {\n                          model: {\n                            value: _vm.selectedImages,\n                            callback: function($$v) {\n                              _vm.selectedImages = $$v\n                            },\n                            expression: \"selectedImages\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _c(\n                      \"span\",\n                      {\n                        directives: [\n                          {\n                            name: \"show\",\n                            rawName: \"v-show\",\n                            value:\n                              field.validates && _vm.validateField(field.model),\n                            expression:\n                              \"field.validates && validateField(field.model)\"\n                          }\n                        ],\n                        staticClass: \"text-danger text-xs\"\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(_vm.$t(\"messages.validation.invalidField\"))\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ])\n            }),\n            0\n          )\n        }),\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"vx-row\" }, [\n        _c(\n          \"div\",\n          { staticClass: \"vx-col w-full\" },\n          [\n            !_vm.isEditForm\n              ? _c(\n                  \"vs-button\",\n                  {\n                    staticClass: \"mr-3 mb-2\",\n                    attrs: { color: \"primary\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.submitForm()\n                      }\n                    }\n                  },\n                  [_vm._v(_vm._s(_vm.$t(\"actions.create\")))]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _vm.isEditForm\n              ? _c(\n                  \"vs-button\",\n                  {\n                    staticClass: \"mr-3 mb-2\",\n                    attrs: { color: \"primary\" },\n                    on: {\n                      click: function($event) {\n                        return _vm.submitForm()\n                      }\n                    }\n                  },\n                  [_vm._v(_vm._s(_vm.$t(\"actions.update\")))]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"vs-button\",\n              {\n                staticClass: \"mb-2\",\n                attrs: {\n                  color: \"danger\",\n                  type: \"border\",\n                  to: { name: _vm.indexRoute }\n                }\n              },\n              [_vm._v(_vm._s(_vm.$t(\"actions.cancel\")))]\n            )\n          ],\n          1\n        )\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","//Library for working with requests\nimport axios from 'axios';\n\n//Event bus for sending and processing global events\nimport EventBus from '../../EventBus';\n\n//Datepicker component\nimport Datepicker from 'vuejs-datepicker';\n\nconst formHelper = {\n    components: { Datepicker },\n    props: {\n        statuses: {\n            type: Array,\n            default() {\n                return [\n                    {\n                        title: this.$t('statuses.general.published'),\n                        value: true\n                    },\n                    {\n                        title: this.$t('statuses.general.hidden'),\n                        value: false\n                    }\n                ]\n            }\n        }\n    },\n    data() {\n\n        return {\n\n            instance: '',\n            model: {},\n            products: [],\n            producents: [],\n            categories: [],\n            banners: [],\n            filters: [],\n            attributes: [],\n            selectedImages: [],\n            shippingMethods: [],\n            paymentMethods: [],\n            orderStatuses: []\n\n        }\n\n    },\n    methods: {\n\n        setInstance(instance){\n\n            this.instance = instance;\n\n        },\n        getFormTitle(isEdit){\n\n            if(isEdit){\n\n                return this.$t('forms.' + this.instance + '.titles.edit');\n\n            }\n            else{\n\n                return this.$t('forms.' + this.instance + '.titles.create');\n\n            }\n\n        },\n        getSectionTitle(slug){\n\n            return this.$t('forms.' + this.instance + '.sections.' + slug + '.label');\n\n        },\n        //Newer and more advanced method for retrieving a form section title\n        getFormSectionTitle(slug){\n\n            return this.$t('models.' + this.instance + '.form.' + slug);\n\n        },\n        //Newer and more advanced method for retrieving a model property name\n        getPropertyTitle(property){\n\n            return this.$t('models.' + this.instance + '.properties.' + property);\n\n        },\n        getFieldLabel(section, field){\n\n            return this.$t('forms.' + this.instance + '.sections.' + section + '.fields.' + field);\n\n        },\n        getProducts(params) {\n\n            axios.get(this.API.product.list, params).then(response => {\n\n                this.products =  response.data.data\n\n            });\n\n        },\n        getProducents(params) {\n\n            axios.get(this.API.producent.list, params).then(response => {\n\n                this.producents =  response.data.data\n\n            });\n\n        },\n        getCategories(params) {\n\n            axios.get(this.API.category.list, params).then(response => {\n\n                this.categories =  response.data.data\n\n            });\n\n        },\n        getBanners(params) {\n\n            axios.get(this.API.banner.list, params).then(response => {\n\n                this.banners = response.data.data\n\n            });\n\n        },\n        getFilters(params) {\n\n            axios.get(this.API.filter.list, params).then(response => {\n\n                this.filters = response.data.data\n\n            });\n\n        },\n        getAttributes(params) {\n\n            axios.get(this.API.attribute.list, params).then(response => {\n\n                this.attributes = response.data.data\n\n            });\n\n        },\n        getShippingMethods(){\n\n            let requestUrl = this.API.shippingMethod.list;\n\n            let requestParams = this.defaultSortParams();\n\n            axios.get(requestUrl, {params: requestParams}).then(response => {\n\n                this.shippingMethods = response.data.data;\n\n            });\n\n        },\n        getPaymentMethods(){\n\n            let requestUrl = this.API.paymentMethod.list;\n\n            let requestParams = this.defaultSortParams();\n\n            axios.get(requestUrl, {params: requestParams}).then(response => {\n\n                this.paymentMethods = response.data.data;\n\n            });\n\n        },\n        getOrderStatuses(){\n\n            let requestUrl = this.API.orderStatus.list;\n\n            axios.get(requestUrl).then(response => {\n\n                this.orderStatuses = response.data.data;\n\n            });\n\n        },\n        searchProducts(search, loading){\n\n            let requestParams = {\n\n                params: {\n                    search: search\n                }\n\n            };\n\n            //Search products\n            this.getProducts(requestParams);\n\n        },\n        searchCategories(search, loading){\n\n            let requestParams = {\n\n                params: {\n                    search: search\n                }\n\n            };\n\n            //Search products\n            this.getCategories(requestParams);\n\n        },\n        searchFilters(search, loading){\n\n            let requestParams = {\n\n                params: {\n                    search: search\n                }\n\n            };\n\n            //Search products\n            this.getFilters(requestParams);\n\n        },\n        showNotification(type, message, color, customInstance, isPlural){\n\n            let instance = '';\n\n            let count = 1;\n\n            if(isPlural){\n\n                count = 2;\n\n            }\n\n            if(customInstance){\n\n                instance = this.$tc('models.' + customInstance + '.title', count);\n\n            }\n            else{\n\n                instance = this.$tc('models.' + this.instance + '.title', count);\n\n            }\n\n            let title = this.$t('messages.' + type);\n\n            let text = this.$tc('messages.' + message, count, { instance: instance });\n\n            this.$vs.notify(\n                {\n                    title: title,\n                    text:  text,\n                    color: color\n                }\n            );\n\n        },\n        getOptions(options){\n\n            //Get the form's field options by the property name\n            return this[options];\n\n        },\n        normalizeData(options){\n\n            let normalized = [];\n\n            options.forEach(function(option){\n\n                normalized.push(option.id);\n\n            });\n\n            return normalized;\n\n        }\n    },\n    created() {\n\n    },\n    mounted: function(){\n\n    }\n\n};\n\nexport default formHelper;","//Validation library\nimport { required, minLength, between } from 'vuelidate/lib/validators';\n\n//Shipping method model\nexport const model = {\n\n    name: '',\n    description: '',\n    cost: '',\n    image_id: ''\n\n};\n\n//Shipping method validation params\nexport const validations = {\n\n    model: {\n\n        name: {\n            required\n        },\n        cost: {\n            required\n        }\n\n    }\n\n};\n\n//Shipping method form structure\nexport const formStructure = {\n\n    sections: [\n\n        {\n            slug: 'general',\n            fields: [\n\n                {\n                    model: 'name',\n                    type: 'text',\n                    validates: true\n                },\n                {\n                    model: 'description',\n                    type: 'textarea'\n                }\n\n            ]\n        },\n        {\n            slug: 'price',\n            fields: [\n                {\n                    model: 'cost',\n                    type: 'number',\n                    validates: true\n                }\n            ]\n        },\n        {\n            slug: 'images',\n            fields: [\n                {\n                    model: 'image_id',\n                    type: 'imageUpload',\n                    multiple: false\n                }\n            ]\n        }\n\n    ]\n\n};\n\n","import { render, staticRenderFns } from \"./Form.vue?vue&type=template&id=324bf4bb&\"\nimport script from \"./Form.vue?vue&type=script&lang=js&\"\nexport * from \"./Form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/var/www/vhosts/posebanpoklon.rs/httpdocs/posebanpoklon/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('324bf4bb')) {\n      api.createRecord('324bf4bb', component.options)\n    } else {\n      api.reload('324bf4bb', component.options)\n    }\n    module.hot.accept(\"./Form.vue?vue&type=template&id=324bf4bb&\", function () {\n      api.rerender('324bf4bb', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/dashboard/views/shipping/Form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Form.vue?vue&type=template&id=324bf4bb&\""],"sourceRoot":""}