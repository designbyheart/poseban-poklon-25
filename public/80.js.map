{"version":3,"sources":["webpack:///resources/js/dashboard/views/setting/Settings.vue","webpack:///./resources/js/dashboard/views/setting/Settings.vue?8199","webpack:///./resources/js/dashboard/static/setting/setting.js","webpack:///./resources/js/dashboard/views/setting/Settings.vue","webpack:///./resources/js/dashboard/views/setting/Settings.vue?5651","webpack:///./resources/js/dashboard/views/setting/Settings.vue?b46e"],"names":["settingsList","slug","type","options","labelKey","valueKey","value","name","instance","data"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;CAGA;;CAGA;;CAGA;;CAGA;;AACA;AAEA;AACA;AAAA;AAAA;AAAA,GADA;AAEA,MAFA,kBAEA;AAEA;AAEA,yBAFA;AAGA,8BAHA;AAIA,wFAJA;AAKA,8EALA;AAMA,kBANA;AAOA;AAPA;AAUA,GAdA;AAeA;AAEA,kBAFA,4BAEA;AAEA;AAEA;AAEA;AAEA,OAJA;AAMA,KAZA;AAaA,cAbA,sBAaA,IAbA,EAaA;AAEA;AAEA;AAEA,OAJA;AAMA;AAEA,KAvBA;AAwBA,WAxBA,mBAwBA,QAxBA,EAwBA,MAxBA,EAwBA;AAAA;;AAEA;AAEA;AAEA;;AAEA;AAEA;AAEA,SAJA;;AAMA;AAEA;AAEA;AAEA,OAhBA;AAmBA,KA/CA;AAgDA,eAhDA,uBAgDA,MAhDA,EAgDA;AAAA;;AAEA;AAEA,6CAFA,CAIA;;AACA;AAEA,OAPA;AASA,KA3DA;AA4DA,aA5DA,uBA4DA;AAEA;AAEA;AAEA;AAEA;AAEA,SAJA;;AAMA;AAEA;AAEA;AAEA,OAdA;AAgBA,KAhFA;AAiFA,kBAjFA,4BAiFA;AAAA;;AAEA;AAEA;AAEA;AAEA;AACA;AADA;AAIA;AAGA;AAEA;AAEA,SAJA;;AAMA;AAEA;AACA,8BADA;AAEA;AAFA;AAKA;AAEA;AAGA,OArBA;AAwBA,uFACA;AAEA;AAEA;AAEA;AAEA,OATA,WAWA;AAEA;AAEA,OAfA;AAkBA,KAvIA;AAwIA,kBAxIA,0BAwIA,IAxIA,EAwIA;AAEA;AAEA,KA5IA;AA6IA,oBA7IA,4BA6IA,IA7IA,EA6IA,OA7IA,EA6IA,KA7IA,EA6IA,cA7IA,EA6IA,QA7IA,EA6IA;AAEA;AAEA;;AAEA;AAEA;AAEA;;AAEA;AAEA;AAEA,OAJA,MAKA;AAEA;AAEA;;AAEA;AAEA;AAAA;AAAA;AAEA,sBACA;AACA,oBADA;AAEA,kBAFA;AAGA;AAHA,OADA;AAQA;AAhLA,GAfA;AAkMA,SAlMA,qBAkMA,CAEA,CApMA;AAqMA,SArMA,qBAqMA;AAEA;AACA,0BAHA,CAKA;;AACA;AAEA;AA7MA,G;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS,sCAAsC,EAAE;AACtE,mBAAmB,wBAAwB;AAC3C;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA,gCAAgC,yCAAyC;AACzE,2BAA2B,+BAA+B;AAC1D,2BAA2B,gCAAgC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+BAA+B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,aAAa,+BAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC5HA;AAAA;AAAA;AAAA;AACO,IAAMA,YAAY,GAAG,CAExB;AACIC,MAAI,EAAE,kBADV;AAEIC,MAAI,EAAE,QAFV;AAGIC,SAAO,EAAE,YAHb;AAIIC,UAAQ,EAAE,OAJd;AAKIC,UAAQ,EAAE,MALd;AAMIC,OAAK,EAAE;AANX,CAFwB,EAUxB;AACIL,MAAI,EAAE,cADV;AAEIC,MAAI,EAAE,QAFV;AAGIC,SAAO,EAAE,eAHb;AAIIC,UAAQ,EAAE,OAJd;AAKIC,UAAQ,EAAE,IALd;AAMIC,OAAK,EAAE;AANX,CAVwB,EAkBxB;AACIL,MAAI,EAAE,kBADV;AAEIC,MAAI,EAAE,UAFV;AAGII,OAAK,EAAE;AAHX,CAlBwB,EAuBxB;AACIL,MAAI,EAAE,gBADV;AAEIC,MAAI,EAAE,UAFV;AAGII,OAAK,EAAE;AAHX,CAvBwB,EA4BxB;AACIL,MAAI,EAAE,WADV;AAEIC,MAAI,EAAE,OAFV;AAGII,OAAK,EAAE;AAHX,CA5BwB,CAArB;AAoCA,IAAMH,OAAO,GAAG,CAEnB;AACII,MAAI,EAAE,YADV;AAEIC,UAAQ,EAAE,UAFd;AAGIC,MAAI,EAAE;AAHV,CAFmB,EAOnB;AACIF,MAAI,EAAE,eADV;AAEIC,UAAQ,EAAE,aAFd;AAGIC,MAAI,EAAE;AAHV,CAPmB,CAAhB,C;;;;;;;;;;;;ACrCP;AAAA;AAAA;AAAA;AAAuF;AAC3B;AACL;;;AAGvD;AACmG;AACnG,gBAAgB,2GAAU;AAC1B,EAAE,8EAAM;AACR,EAAE,mFAAM;AACR,EAAE,4FAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;ACtCf;AAAA;AAAA,wCAAoM,CAAgB,oPAAG,EAAC,C;;;;;;;;;;;;ACAxN;AAAA;AAAA;AAAA;AAAA;AAAA","file":"80.js","sourcesContent":["<template>\n\n    <div>\n\n        <vx-card :title=\"$t('settings.pageTitle')\">\n            <div class=\"vx-row\">\n                <div class=\"vx-col w-full\">\n\n                    <div class=\"vx-row mb-3\" :key=\"index\" v-for=\"setting, index in settingsList\">\n\n                        <div class=\"vx-col w-full\">\n                            <p class=\"font-bold mb-2\">{{ getSettingName(setting.slug) }}</p>\n                        </div>\n                        <div class=\"vx-col w-full\">\n\n                            <!--Select-->\n                            <vs-select\n                                autocomplete\n                                v-model=\"setting.value\"\n                                :is-selected.sync=\"setting.value\"\n                                class=\"w-full\"\n                                v-if=\"setting.type === 'select'\"\n                            >\n                                <vs-select-item :key=\"index\" :value=\"item[setting.valueKey]\" :text=\"item[setting.labelKey]\" v-for=\"item,index in getOptions(setting.options)\" />\n                            </vs-select>\n\n                            <!--Textarea-->\n                            <vs-textarea\n                                v-model=\"setting.value\"\n                                class=\"mb-0\"\n                                v-if=\"setting.type === 'textarea'\"\n                            >\n                            </vs-textarea>\n\n                            <!-- Image upload component -->\n                            <image-upload v-if=\"setting.type === 'image'\" v-model=\"setting.value\"></image-upload>\n\n                        </div>\n\n                    </div>\n\n                </div>\n            </div>\n            <div class=\"vx-row\">\n                <div class=\"vx-col w-full\">\n                    <vs-button @click=\"updateSettings()\">{{ $t('actions.update') }}</vs-button>\n                </div>\n            </div>\n        </vx-card>\n\n    </div>\n\n</template>\n<script>\n\n    //Library for working with requests\n    import axios from 'axios';\n\n    //Vue select\n    import vSelect from 'vue-select'\n\n    //Image uploader\n    import ImageUpload from '../../components/images/ImageUpload';\n\n    //Settings list\n    import { settingsList, options } from \"../../static/setting/setting\";\n\n    //Applications routes\n    import { API } from '@/mixins/api/api';\n\n    export default {\n        components: {vSelect, ImageUpload},\n        data() {\n\n            return {\n\n                instance: 'setting',\n                instanceSlug: 'settings',\n                settingsList,\n                options,\n                settings: [],\n                API\n            }\n\n        },\n        methods: {\n\n            getOptionsData(){\n\n                let component = this;\n\n                this.options.forEach(function(item){\n\n                    component.getData(item.instance);\n\n                });\n\n            },\n            getOptions(name){\n\n                let container = this.options.find(function(item){\n\n                    return item.name === name;\n\n                });\n\n                return container.data;\n\n            },\n            getData(instance, params){\n\n                let items = [];\n\n                axios.get(this.API[instance].list, params).then(response => {\n\n                    items = response.data.data;\n\n                    let container = this.options.find(function(item){\n\n                        return item.instance === instance;\n\n                    });\n\n                    if(container !== undefined){\n\n                        container.data = items;\n\n                    }\n\n                });\n\n\n            },\n            getSettings(params){\n\n                axios.get(this.API[this.instance].list, params).then(response => {\n\n                    this.settings = response.data.data;\n\n                    //Set values for settings\n                    this.setValues();\n\n                });\n\n            },\n            setValues(){\n\n                let settings = this.settings;\n\n                this.settingsList.forEach(function(setting){\n\n                    let settingItem = settings.find(function(item){\n\n                        return item.slug === setting.slug;\n\n                    });\n\n                    if(settingItem !== undefined){\n\n                        setting.value = settingItem.content;\n\n                    }\n\n                });\n\n            },\n            updateSettings(){\n\n                let component = this;\n\n                let settings = this.settings;\n\n                let requestUrl = this.API[this.instance].update;\n\n                let requestParams = {\n                    settings: []\n                };\n\n                this.settingsList.forEach(function(setting){\n\n\n                    let settingItem = settings.find(function(item){\n\n                        return item.slug === setting.slug;\n\n                    });\n\n                    if(settingItem !== undefined && setting.value !== settingItem.content){\n\n                        let settingObject = {\n                            id: settingItem.id,\n                            content: setting.value\n                        };\n\n                        requestParams.settings.push(settingObject);\n\n                    }\n\n\n                });\n\n\n                axios.put(requestUrl, requestParams).then(\n                    response => {\n\n                        if (response.data === 'success') {\n\n                            this.showNotification('success', 'request.updatedSuccess', 'success', undefined, true);\n\n                        }\n\n                    })\n                    .catch(\n                        error => {\n\n                            this.showNotification('success', 'request.error', 'danger');\n\n                        }\n                    );\n\n            },\n            getSettingName(slug){\n\n                return this.$t('settings.' + slug + '.title');\n\n            },\n            showNotification(type, message, color, customInstance, isPlural){\n\n                let instance = '';\n\n                let count = 1;\n\n                if(isPlural){\n\n                    count = 2;\n\n                }\n\n                if(customInstance){\n\n                    instance = this.$tc('models.' + customInstance + '.title', count);\n\n                }\n                else{\n\n                    instance = this.$tc('models.' + this.instance + '.title', count);\n\n                }\n\n                let title = this.$t('messages.' + type);\n\n                let text = this.$tc('messages.' + message, count, { instance: instance });\n\n                this.$vs.notify(\n                    {\n                        title: title,\n                        text:  text,\n                        color: color\n                    }\n                );\n\n            },\n\n        },\n        created(){\n\n        },\n        mounted() {\n\n            //Get the data for selects\n            this.getOptionsData();\n\n            //Get settings values\n            this.getSettings();\n\n        }\n    }\n</script>","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"vx-card\", { attrs: { title: _vm.$t(\"settings.pageTitle\") } }, [\n        _c(\"div\", { staticClass: \"vx-row\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"vx-col w-full\" },\n            _vm._l(_vm.settingsList, function(setting, index) {\n              return _c(\"div\", { key: index, staticClass: \"vx-row mb-3\" }, [\n                _c(\"div\", { staticClass: \"vx-col w-full\" }, [\n                  _c(\"p\", { staticClass: \"font-bold mb-2\" }, [\n                    _vm._v(_vm._s(_vm.getSettingName(setting.slug)))\n                  ])\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  { staticClass: \"vx-col w-full\" },\n                  [\n                    setting.type === \"select\"\n                      ? _c(\n                          \"vs-select\",\n                          {\n                            staticClass: \"w-full\",\n                            attrs: {\n                              autocomplete: \"\",\n                              \"is-selected\": setting.value\n                            },\n                            on: {\n                              \"update:isSelected\": function($event) {\n                                return _vm.$set(setting, \"value\", $event)\n                              },\n                              \"update:is-selected\": function($event) {\n                                return _vm.$set(setting, \"value\", $event)\n                              }\n                            },\n                            model: {\n                              value: setting.value,\n                              callback: function($$v) {\n                                _vm.$set(setting, \"value\", $$v)\n                              },\n                              expression: \"setting.value\"\n                            }\n                          },\n                          _vm._l(_vm.getOptions(setting.options), function(\n                            item,\n                            index\n                          ) {\n                            return _c(\"vs-select-item\", {\n                              key: index,\n                              attrs: {\n                                value: item[setting.valueKey],\n                                text: item[setting.labelKey]\n                              }\n                            })\n                          }),\n                          1\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    setting.type === \"textarea\"\n                      ? _c(\"vs-textarea\", {\n                          staticClass: \"mb-0\",\n                          model: {\n                            value: setting.value,\n                            callback: function($$v) {\n                              _vm.$set(setting, \"value\", $$v)\n                            },\n                            expression: \"setting.value\"\n                          }\n                        })\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    setting.type === \"image\"\n                      ? _c(\"image-upload\", {\n                          model: {\n                            value: setting.value,\n                            callback: function($$v) {\n                              _vm.$set(setting, \"value\", $$v)\n                            },\n                            expression: \"setting.value\"\n                          }\n                        })\n                      : _vm._e()\n                  ],\n                  1\n                )\n              ])\n            }),\n            0\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"vx-row\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"vx-col w-full\" },\n            [\n              _c(\n                \"vs-button\",\n                {\n                  on: {\n                    click: function($event) {\n                      return _vm.updateSettings()\n                    }\n                  }\n                },\n                [_vm._v(_vm._s(_vm.$t(\"actions.update\")))]\n              )\n            ],\n            1\n          )\n        ])\n      ])\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","//The list of all settings\nexport const settingsList = [\n\n    {\n        slug: 'default_currency',\n        type: 'select',\n        options: 'currencies',\n        labelKey: 'title',\n        valueKey: 'code',\n        value: ''\n    },\n    {\n        slug: 'order_status',\n        type: 'select',\n        options: 'orderStatuses',\n        labelKey: 'title',\n        valueKey: 'id',\n        value: ''\n    },\n    {\n        slug: 'google_analytics',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'facebook_pixel',\n        type: 'textarea',\n        value: ''\n    },\n    {\n        slug: 'site_logo',\n        type: 'image',\n        value: ''\n    }\n\n];\n\nexport const options = [\n\n    {\n        name: 'currencies',\n        instance: 'currency',\n        data: []\n    },\n    {\n        name: 'orderStatuses',\n        instance: 'orderStatus',\n        data: []\n    }\n\n];","import { render, staticRenderFns } from \"./Settings.vue?vue&type=template&id=2876a9fc&\"\nimport script from \"./Settings.vue?vue&type=script&lang=js&\"\nexport * from \"./Settings.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/var/www/html/posebanpoklon/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2876a9fc')) {\n      api.createRecord('2876a9fc', component.options)\n    } else {\n      api.reload('2876a9fc', component.options)\n    }\n    module.hot.accept(\"./Settings.vue?vue&type=template&id=2876a9fc&\", function () {\n      api.rerender('2876a9fc', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/dashboard/views/setting/Settings.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Settings.vue?vue&type=template&id=2876a9fc&\""],"sourceRoot":""}