name: Deploy Application

on:
  push:
    branches:
      - main # triggers production deployment
      - staging # triggers staging deployment

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Define environment based on the branch
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          passphrase: ${{ secrets.PROD_SERVER_KEY_PASS }}
          port: 22
          source: "./"
          target: "${{ secrets.PROD_DEPLOY_PATH }}"

      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          passphrase: ${{ secrets.PROD_SERVER_KEY_PASS }}
          port: 22
          script: |
            cd ${{ secrets.PROD_DEPLOY_PATH }}
            cp ../.env .
            echo "Deployed successfully"


      # - name: ssh-action-deploy
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.PROD_SERVER_HOST }}
      #     username: ${{ secrets.PROD_SERVER_USER }}
      #     key: ${{ secrets.PROD_SERVER_KEY }}
      #     passphrase: ${{ secrets.PROD_SERVER_KEY_PASS }}
      #     port: 22
      #     script: |
      #       cd ${{ secrets.PROD_DEPLOY_PATH }}
      #       ls -la
      #       echo "Deployed successfully"
#            pip install -r requirements.txt
#            sudo systemctl daemon-reload
#            sudo systemctl stop orbyjets-ai
#            sudo systemctl restart orbyjets-ai
#            sudo systemctl status orbyjets-ai

#      - name: Run remote commands over SSHÃ…
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.PROD_SERVER_HOST }}
#          username: ${{ secrets.PROD_SERVER_USER }}
#          key: ${{ secrets.SSH_KEY }}
#          password: ${{ secrets.PROD_SERVER_PASS }}
#          script: |
#            cd ${{ secrets.PROD_DEPLOY_PATH }}
#            # Optional: additional commands, e.g., restart a service
#            ls -la
#            echo "Connected"

#      - name: Deploy to Server
#        env:
#          # Use different secrets based on environment
#          SERVER_HOST: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_HOST || secrets.STAGING_SERVER_HOST }}
#          SERVER_USER: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_USER || secrets.STAGING_SERVER_USER }}
#          SERVER_PASS: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_PASS || secrets.STAGING_SERVER_PASS }}
#          DEPLOY_PATH: ${{ github.ref == 'refs/heads/main' && secrets.PROD_DEPLOY_PATH || secrets.STAGING_DEPLOY_PATH }}
#          BRANCH_NAME: ${{ github.ref == 'refs/heads/main' && 'main' || 'staging' }}
#        run: |
#          # Create a temporary script file with commands
#          echo "cd $DEPLOY_PATH && \
#          git checkout $BRANCH_NAME && \
#          git pull origin $BRANCH_NAME && \
#          composer install --no-interaction --prefer-dist --optimize-autoloader && \
#          php artisan optimize:clear && \
#          php artisan config:clear && \
#          php artisan cache:clear" > deploy_commands.sh
#
#          # Make the script executable
#          chmod +x deploy_commands.sh
#
#          # Use SFTP to upload the script
#          sshpass -p "$SERVER_PASS" sftp -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST << EOF
#          put deploy_commands.sh /tmp/deploy_commands.sh
#          EOF
#
#          # # Execute the uploaded script via SFTP
#          sshpass -p "$SERVER_PASS" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "bash /tmp/deploy_commands.sh && rm /tmp/deploy_commands.sh"
#
#          # # Clean up local script
#          rm deploy_commands.sh
