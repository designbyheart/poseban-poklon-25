name: Deploy Application

on:
  push:
    branches:
      - main # triggers production deployment
      - staging # triggers staging deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install npm dependencies
        run: npm install

      - name: Build frontend
        run: npm run prod

      - name: Upload files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          passphrase: ${{ secrets.PROD_SERVER_KEY_PASS }}
          port: 22
          source: "./"
          target: "${{ secrets.PROD_DEPLOY_PATH }}"
          rm: false

      - name: Execute remote deployment commands
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          passphrase: ${{ secrets.PROD_SERVER_KEY_PASS }}
          port: 22
          script: |
                    cd ${{ secrets.PROD_DEPLOY_PATH }}
                    cp ../.env .

                    # Transform PROD_NESTPAY to NESTPAY in the .env file
                    sed -i 's/^PROD_//' .env

                    # Install composer dependencies on the server
                    composer install --no-dev --optimize-autoloader --no-interaction

                    # Clear any previous caches
                    php artisan config:clear
                    php artisan route:clear
                    php artisan view:clear

                    # Optimize for production
                    php artisan config:cache
                    php artisan route:cache
                    php artisan view:cache


            #          Run migrations (with --force for production)
            #           php artisan migrate --force

            # Set proper permissions
                    chmod -R 775 storage bootstrap/cache
                    chown -R www-data:www-data storage bootstrap/cache

                    echo "Deployed successfully"
